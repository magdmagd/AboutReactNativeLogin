{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-community/async-storage\"));\n\nvar _Loader = _interopRequireDefault(require(\"./Components/Loader\"));\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Coding\\\\IDI\\\\AboutReactApp\\\\Screen\\\\LoginScreen.js\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = (0, _react.useState)(''),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      userEmail = _useState2[0],\n      setUserEmail = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(''),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      userPassword = _useState4[0],\n      setUserPassword = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(false),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = (0, _react.useState)(''),\n      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n      errortext = _useState8[0],\n      setErrortext = _useState8[1];\n\n  var passwordInputRef = (0, _react.createRef)();\n\n  var handleSubmitPress = function handleSubmitPress() {\n    setErrortext('');\n\n    if (!userEmail) {\n      alert('Please fill Email');\n      return;\n    }\n\n    if (!userPassword) {\n      alert('Please fill Password');\n      return;\n    }\n\n    setLoading(true);\n    var dataToSend = {\n      email: userEmail,\n      password: userPassword\n    };\n    var formBody = [];\n\n    for (var key in dataToSend) {\n      var encodedKey = encodeURIComponent(key);\n      var encodedValue = encodeURIComponent(dataToSend[key]);\n      formBody.push(encodedKey + '=' + encodedValue);\n    }\n\n    formBody = formBody.join('&');\n    fetch('http://localhost:3000/api/user/login', {\n      method: 'POST',\n      body: formBody,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (responseJson) {\n      setLoading(false);\n      console.log(responseJson);\n\n      if (responseJson.status === 'success') {\n        _asyncStorage.default.setItem('user_id', responseJson.data.email);\n\n        console.log(responseJson.data.email);\n        navigation.replace('DrawerNavigationRoutes');\n      } else {\n        setErrortext(responseJson.msg);\n        console.log('Please check your email id or password');\n      }\n    }).catch(function (error) {\n      setLoading(false);\n      console.error(error);\n    });\n  };\n\n  return _react.default.createElement(_reactNative.View, {\n    style: styles.mainBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_Loader.default, {\n    loading: loading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNative.ScrollView, {\n    keyboardShouldPersistTaps: \"handled\",\n    contentContainerStyle: {\n      flex: 1,\n      justifyContent: 'center',\n      alignContent: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNative.KeyboardAvoidingView, {\n    enabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: {\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNative.Image, {\n    source: require('../Image/aboutreact.png'),\n    style: {\n      width: '50%',\n      height: 100,\n      resizeMode: 'contain',\n      margin: 30\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  })), _react.default.createElement(_reactNative.View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNative.TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(UserEmail) {\n      return setUserEmail(UserEmail);\n    },\n    placeholder: \"Enter Email\",\n    placeholderTextColor: \"#8b9cb5\",\n    autoCapitalize: \"none\",\n    keyboardType: \"email-address\",\n    returnKeyType: \"next\",\n    onSubmitEditing: function onSubmitEditing() {\n      return passwordInputRef.current && passwordInputRef.current.focus();\n    },\n    underlineColorAndroid: \"#f000\",\n    blurOnSubmit: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  })), _react.default.createElement(_reactNative.View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNative.TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(UserPassword) {\n      return setUserPassword(UserPassword);\n    },\n    placeholder: \"Enter Password\",\n    placeholderTextColor: \"#8b9cb5\",\n    keyboardType: \"default\",\n    ref: passwordInputRef,\n    onSubmitEditing: _reactNative.Keyboard.dismiss,\n    blurOnSubmit: false,\n    secureTextEntry: true,\n    underlineColorAndroid: \"#f000\",\n    returnKeyType: \"next\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  })), errortext != '' ? _react.default.createElement(_reactNative.Text, {\n    style: styles.errorTextStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  }, errortext) : null, _react.default.createElement(_reactNative.TouchableOpacity, {\n    style: styles.buttonStyle,\n    activeOpacity: 0.5,\n    onPress: handleSubmitPress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: styles.buttonTextStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, \"LOGIN\")), _react.default.createElement(_reactNative.Text, {\n    style: styles.registerTextStyle,\n    onPress: function onPress() {\n      return navigation.navigate('RegisterScreen');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, \"New Here ? Register\")))));\n};\n\nvar _default = LoginScreen;\nexports.default = _default;\n\nvar styles = _reactNative.StyleSheet.create({\n  mainBody: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#307ecc',\n    alignContent: 'center'\n  },\n  SectionStyle: {\n    flexDirection: 'row',\n    height: 40,\n    marginTop: 20,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10\n  },\n  buttonStyle: {\n    backgroundColor: '#7DE24E',\n    borderWidth: 0,\n    color: '#FFFFFF',\n    borderColor: '#7DE24E',\n    height: 40,\n    alignItems: 'center',\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 25\n  },\n  buttonTextStyle: {\n    color: '#FFFFFF',\n    paddingVertical: 10,\n    fontSize: 16\n  },\n  inputStyle: {\n    flex: 1,\n    color: 'white',\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 30,\n    borderColor: '#dadae8'\n  },\n  registerTextStyle: {\n    color: '#FFFFFF',\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 14,\n    alignSelf: 'center',\n    padding: 10\n  },\n  errorTextStyle: {\n    color: 'red',\n    textAlign: 'center',\n    fontSize: 14\n  }\n});","map":{"version":3,"sources":["D:/Coding/IDI/AboutReactApp/Screen/LoginScreen.js"],"names":["LoginScreen","navigation","userEmail","setUserEmail","userPassword","setUserPassword","loading","setLoading","errortext","setErrortext","passwordInputRef","handleSubmitPress","alert","dataToSend","email","password","formBody","key","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","body","headers","then","response","json","responseJson","console","log","status","AsyncStorage","setItem","data","replace","msg","catch","error","styles","mainBody","flex","justifyContent","alignContent","alignItems","require","width","height","resizeMode","margin","SectionStyle","inputStyle","UserEmail","current","focus","UserPassword","Keyboard","dismiss","errorTextStyle","buttonStyle","buttonTextStyle","registerTextStyle","navigate","StyleSheet","create","backgroundColor","flexDirection","marginTop","marginLeft","marginRight","borderWidth","color","borderColor","borderRadius","marginBottom","paddingVertical","fontSize","paddingLeft","paddingRight","textAlign","fontWeight","alignSelf","padding"],"mappings":"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","sourcesContent":["import React, {useState, createRef} from 'react';\r\nimport {\r\n  StyleSheet,\r\n  TextInput,\r\n  View,\r\n  Text,\r\n  ScrollView,\r\n  Image,\r\n  Keyboard,\r\n  TouchableOpacity,\r\n  KeyboardAvoidingView,\r\n} from 'react-native';\r\n\r\nimport AsyncStorage from '@react-native-community/async-storage';\r\n\r\nimport Loader from './Components/Loader';\r\n\r\nconst LoginScreen = ({navigation}) => {\r\n  const [userEmail, setUserEmail] = useState('');\r\n  const [userPassword, setUserPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [errortext, setErrortext] = useState('');\r\n\r\n  const passwordInputRef = createRef();\r\n\r\n  const handleSubmitPress = () => {\r\n    setErrortext('');\r\n    if (!userEmail) {\r\n      alert('Please fill Email');\r\n      return;\r\n    }\r\n    if (!userPassword) {\r\n      alert('Please fill Password');\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    let dataToSend = {email: userEmail, password: userPassword};\r\n    let formBody = [];\r\n    for (let key in dataToSend) {\r\n      let encodedKey = encodeURIComponent(key);\r\n      let encodedValue = encodeURIComponent(dataToSend[key]);\r\n      formBody.push(encodedKey + '=' + encodedValue);\r\n    }\r\n    formBody = formBody.join('&');\r\n\r\n    fetch('http://localhost:3000/api/user/login', {\r\n      method: 'POST',\r\n      body: formBody,\r\n      headers: {\r\n        //Header Defination\r\n        'Content-Type':\r\n        'application/x-www-form-urlencoded;charset=UTF-8',\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((responseJson) => {\r\n        //Hide Loader\r\n        setLoading(false);\r\n        console.log(responseJson);\r\n        // If server response message same as Data Matched\r\n        if (responseJson.status === 'success') {\r\n          AsyncStorage.setItem('user_id', responseJson.data.email);\r\n          console.log(responseJson.data.email);\r\n          navigation.replace('DrawerNavigationRoutes');\r\n        } else {\r\n          setErrortext(responseJson.msg);\r\n          console.log('Please check your email id or password');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //Hide Loader\r\n        setLoading(false);\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.mainBody}>\r\n      <Loader loading={loading} />\r\n      <ScrollView\r\n        keyboardShouldPersistTaps=\"handled\"\r\n        contentContainerStyle={{\r\n          flex: 1,\r\n          justifyContent: 'center',\r\n          alignContent: 'center',\r\n        }}>\r\n        <View>\r\n          <KeyboardAvoidingView enabled>\r\n            <View style={{alignItems: 'center'}}>\r\n              <Image\r\n                source={require('../Image/aboutreact.png')}\r\n                style={{\r\n                  width: '50%',\r\n                  height: 100,\r\n                  resizeMode: 'contain',\r\n                  margin: 30,\r\n                }}\r\n              />\r\n            </View>\r\n            <View style={styles.SectionStyle}>\r\n              <TextInput\r\n                style={styles.inputStyle}\r\n                onChangeText={(UserEmail) =>\r\n                  setUserEmail(UserEmail)\r\n                }\r\n                placeholder=\"Enter Email\" //dummy@abc.com\r\n                placeholderTextColor=\"#8b9cb5\"\r\n                autoCapitalize=\"none\"\r\n                keyboardType=\"email-address\"\r\n                returnKeyType=\"next\"\r\n                onSubmitEditing={() =>\r\n                  passwordInputRef.current &&\r\n                  passwordInputRef.current.focus()\r\n                }\r\n                underlineColorAndroid=\"#f000\"\r\n                blurOnSubmit={false}\r\n              />\r\n            </View>\r\n            <View style={styles.SectionStyle}>\r\n              <TextInput\r\n                style={styles.inputStyle}\r\n                onChangeText={(UserPassword) =>\r\n                  setUserPassword(UserPassword)\r\n                }\r\n                placeholder=\"Enter Password\" //12345\r\n                placeholderTextColor=\"#8b9cb5\"\r\n                keyboardType=\"default\"\r\n                ref={passwordInputRef}\r\n                onSubmitEditing={Keyboard.dismiss}\r\n                blurOnSubmit={false}\r\n                secureTextEntry={true}\r\n                underlineColorAndroid=\"#f000\"\r\n                returnKeyType=\"next\"\r\n              />\r\n            </View>\r\n            {errortext != '' ? (\r\n              <Text style={styles.errorTextStyle}>\r\n                {errortext}\r\n              </Text>\r\n            ) : null}\r\n            <TouchableOpacity\r\n              style={styles.buttonStyle}\r\n              activeOpacity={0.5}\r\n              onPress={handleSubmitPress}>\r\n              <Text style={styles.buttonTextStyle}>LOGIN</Text>\r\n            </TouchableOpacity>\r\n            <Text\r\n              style={styles.registerTextStyle}\r\n              onPress={() => navigation.navigate('RegisterScreen')}>\r\n              New Here ? Register\r\n            </Text>\r\n          </KeyboardAvoidingView>\r\n        </View>\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\nexport default LoginScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  mainBody: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    backgroundColor: '#307ecc',\r\n    alignContent: 'center',\r\n  },\r\n  SectionStyle: {\r\n    flexDirection: 'row',\r\n    height: 40,\r\n    marginTop: 20,\r\n    marginLeft: 35,\r\n    marginRight: 35,\r\n    margin: 10,\r\n  },\r\n  buttonStyle: {\r\n    backgroundColor: '#7DE24E',\r\n    borderWidth: 0,\r\n    color: '#FFFFFF',\r\n    borderColor: '#7DE24E',\r\n    height: 40,\r\n    alignItems: 'center',\r\n    borderRadius: 30,\r\n    marginLeft: 35,\r\n    marginRight: 35,\r\n    marginTop: 20,\r\n    marginBottom: 25,\r\n  },\r\n  buttonTextStyle: {\r\n    color: '#FFFFFF',\r\n    paddingVertical: 10,\r\n    fontSize: 16,\r\n  },\r\n  inputStyle: {\r\n    flex: 1,\r\n    color: 'white',\r\n    paddingLeft: 15,\r\n    paddingRight: 15,\r\n    borderWidth: 1,\r\n    borderRadius: 30,\r\n    borderColor: '#dadae8',\r\n  },\r\n  registerTextStyle: {\r\n    color: '#FFFFFF',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n    fontSize: 14,\r\n    alignSelf: 'center',\r\n    padding: 10,\r\n  },\r\n  errorTextStyle: {\r\n    color: 'red',\r\n    textAlign: 'center',\r\n    fontSize: 14,\r\n  },\r\n});"]},"metadata":{},"sourceType":"script"}